const Counter = {

    data () {
        return {
            count: parseInt(this.start), // we initialize the
                                         // count to the value 
                                         // of start
        }
    },

    template :
    `{{time()}} &nbsp;&nbsp;
    <span v-if='count<=20'>The counter is: {{count}}</span>
    <span v-else>The counter has exceeded 20, it is:
    {{count}}</span>
    `,
    
    
    The counter is: {{count}}, double is:  {{countX2}}`,


    created() {

        var timer = setInterval(() => {
            this.count += 1;
        }, 1000)
    },

    methods : {

        time () {

            // return time as HH:MM:SS

            var date = new Date();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();

            if (hour < 10) hour = "0" + hour;
            if (min < 10) min = "0" + min;
            if (sec < 10) sec = "0" + sec;

            return "" + hour + ":" + min + ":" + sec + "";

        }
    },

    computed : {
        countX2 () {
            return 2 * this.count;
        }
    },

    props : [
        "start"
    ]

}

export default Counter;

// the time() method is defined in the section methods section and 
// is then directly used in the component template within the doube braces {{ and }}
// A method defined in the methods section can use the other methods of this section
// or the reactive variables of the data section by prefixing then with the this keyword

// defining computed properties in the computed section:
// Every second leads to the automatic modification of the countX2 variable thanks to its definition in the computed section.

// the use of parseInt() function (defined as standard in JavaScript) to retrieve the value of this.start in integer form.
// Indeed, the attributes are transmitted in the form of character strings, hence the need to transform this.start into an integer value.

// It is possible to avoid transforming the attribute value into an integer value. All you have to do is indicate when
// using the attribute that you want to keep the JavaScript value and not the character string. We prefix the name of the attribute 
// with the character :, for example:, start='10'. In this case, the value 10 willbe transmitted and not the string "10".

// This makes it possible to be able to transmit in the attributes any types of values: numeric values, character strings, arrays, or objects.





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































